<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>pdf on soli&#39;s blog</title>
        <link>https://soli.seekincs.com/tags/pdf/</link>
        <description>Recent content in pdf on soli&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 03 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://soli.seekincs.com/tags/pdf/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Linux多线程服务端编程：使用muduo C&#43;&#43;网络库.pdf</title>
        <link>https://soli.seekincs.com/2022/12/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8muduo-c-%E7%BD%91%E7%BB%9C%E5%BA%93.pdf/</link>
        <pubDate>Sat, 03 Dec 2022 00:00:00 +0000</pubDate>
        
        <guid>https://soli.seekincs.com/2022/12/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8muduo-c-%E7%BD%91%E7%BB%9C%E5%BA%93.pdf/</guid>
        <description>&lt;img src="https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png" alt="Featured image of post Linux多线程服务端编程：使用muduo C&#43;&#43;网络库.pdf" /&gt;&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;
&lt;h3 id=&#34;q1-tcp服务最大并发连接数&#34;&gt;Q1: TCP服务最大并发连接数？&lt;/h3&gt;
&lt;p&gt;即有一个 TCP 服务程序的地址是 1.2.3.4:8765，问它从理论上能接受多少个并发连接？&lt;br&gt;
单独谈论“TCP 并发连接数”是没有意义的，因为连接数基本上是要多少有多少。更有意义的性能指标或许是：“每秒收发多少条消息”、“每秒收发多少字节的数据”、“支持多少个活动的并发客户”等等。&lt;br&gt;
在只考虑 IPv4 的情况下，并发数的理论上限是 2^48。考虑某些 IP 段被保留了，这个上界可适当缩小，但数量级不变。实际的限制是操作系统全局文件描述符的数量，以及内存大小。&lt;br&gt;
2^48由来：
一个 TCP 连接有两个 end points，每个 end point 是 {ip, port}，题目说其中一
个 end point 已经固定，那么留下一个 end point 的自由度，即 2^48。客户端 IP 的上限是 2^32 个，每个客户端 IP 发起连接的上限是 2^16，乘到一起得到理论上限&lt;br&gt;
在真实的 Linux 系统中，可以通过调整内核参数来支持上百万并发连接。&lt;/p&gt;
&lt;h3 id=&#34;q2-tcp-的可靠性有多高&#34;&gt;Q2: TCP 的可靠性有多高?&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Realize That TCP Is a Reliable Protocol, Not an Infallible Protocol。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;那么 TCP 在哪种情况下会出错？这里说的“出错”指的是收到的数据与发送的数据不一致，而不是数据不可达。&lt;br&gt;
什么情况下 TCP 传送的数据会出错？&lt;br&gt;
IP header 和 TCP header 的 checksum 是一种非常弱的 16-bit check sum 算法，
其把数据当成反码表示的 16-bit integers，再加到一起。这种 checksum 算法能检出
一些简单的错误，而对某些错误无能为力。&lt;br&gt;
路由器可能出现硬件故障，比方说它的内存故障（或偶然错误）导致收发 IP 报
文出现多 bit 的反转或双字节交换，这个反转如果发生在 payload 区，那么无法用
链路层、网络层、传输层的 check sum 查出来，只能通过应用层的 check sum 来检
测。&lt;br&gt;
另外一个例证：下载大文件的时候一般都会附上 MD5，这除了有安全方面的考
虑（防止篡改），也说明应用层应该自己设法校验数据的正确性。这是 end-to-end
principle 的一个例证。&lt;/p&gt;
&lt;h3 id=&#34;q4-tcp如何实现可靠&#34;&gt;Q4: TCP如何实现可靠？&lt;/h3&gt;
&lt;p&gt;TCP 作为一个可靠的传输层协议，其核心有三点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Positive acknowledgement with retransmission；&lt;/li&gt;
&lt;li&gt;Flow control using sliding window （包括 Nagle 算法等）；&lt;/li&gt;
&lt;li&gt;Congestion control （包括 slow start、congestion avoidance、fast retransmit
等）。
第一点已经足以满足“可靠性”要求（为什么？）；第二点是为了提高吞吐量，充
分利用链路层带宽；第三点是防止过载造成丢包。换言之，第二点是避免发得太慢，
第三点是避免发得太快，二者相互制约。从反馈控制的角度看，TCP 像是一个自适应
的节流阀，根据管道的拥堵情况自动调整阀门的流量。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;q3-c10k问题&#34;&gt;Q3: C10K问题？&lt;/h3&gt;
&lt;p&gt;what：所谓C10K问题，就是Client 10000 Problem，即“在同时连接到服务器的客户端数量超过10000个的环境中，即便硬件性能足够，依然无法正常提供服务”这样一个问题&lt;br&gt;
what: 所谓最弱连接问题，就是如果往两端用力拉一条由很多环（连接）组成的锁链，其中最脆弱的一个连接会先断掉。因此，锁链整体的强度取决于其中最脆弱的一环。安全问题也是一样，整体的强度取决于其中最脆弱的部分。&lt;/p&gt;
&lt;h3 id=&#34;q6-常见的并发网络服务程序设计方案&#34;&gt;Q6: 常见的并发网络服务程序设计方案&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://soli.seekincs.com/2022/12/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8muduo-c-%E7%BD%91%E7%BB%9C%E5%BA%93.pdf/static/concurreny-mode.jpg&#34;
	width=&#34;2078&#34;
	height=&#34;786&#34;
	srcset=&#34;https://soli.seekincs.com/2022/12/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8muduo-c-%E7%BD%91%E7%BB%9C%E5%BA%93.pdf/static/concurreny-mode_hu2f1e02e515e351c311ec896043222feb_527718_480x0_resize_q75_box.jpg 480w, https://soli.seekincs.com/2022/12/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%BC%96%E7%A8%8B%E4%BD%BF%E7%94%A8muduo-c-%E7%BD%91%E7%BB%9C%E5%BA%93.pdf/static/concurreny-mode_hu2f1e02e515e351c311ec896043222feb_527718_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;12 种常见方案&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;264&#34;
		data-flex-basis=&#34;634px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>nginx工作笔记</title>
        <link>https://soli.seekincs.com/2022/11/nginx%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</link>
        <pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>https://soli.seekincs.com/2022/11/nginx%E5%B7%A5%E4%BD%9C%E7%AC%94%E8%AE%B0/</guid>
        <description>&lt;img src="https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png" alt="Featured image of post nginx工作笔记" /&gt;&lt;h2 id=&#34;questions&#34;&gt;Questions&lt;/h2&gt;
&lt;h3 id=&#34;q1master与worker进程通信方式&#34;&gt;Q1:master与worker进程通信方式？&lt;/h3&gt;
&lt;p&gt;即master进程如何通知worker进程停止服务或更换日志文件呢？
对于这样控制进程运行的进程间通信方式，Nginx采用的是信号。见ngx_signal_handler方法。&lt;br&gt;
在ngx_worker_process_cycle方法中，通过检查ngx_exiting、ngx_terminate、ngx_quit、
ngx_reopen这4个标志位来决定后续动作。&lt;/p&gt;
&lt;h3 id=&#34;q2worker进程的惊群问题&#34;&gt;Q2:worker进程的惊群问题？&lt;/h3&gt;
&lt;p&gt;即如何解决多个worker子进程监听同一端口引起的“惊群”现象的?&lt;br&gt;
加锁：ngx_process_events_and_timers方法中调用了ngx_trylock_accept_mutex方法。&lt;br&gt;
nginx规定了同一时刻只能有唯一一个worker子进程监听Web端口，这样就不会发生“惊
群”了，此时新连接事件只能唤醒唯一正在监听端口的worker子进程。&lt;/p&gt;
&lt;h3 id=&#34;q3worker进程的均衡问题&#34;&gt;Q3:worker进程的均衡问题？&lt;/h3&gt;
&lt;p&gt;即如何均衡多个worker子进程上处理的连接数?&lt;br&gt;
与“惊群”问题的解决方法一样，只有打开了accept_mutex锁，才能实现worker子进程间的
负载均衡。&lt;/p&gt;
&lt;h3 id=&#34;q4master进程主要功能&#34;&gt;Q4:master进程主要功能？&lt;/h3&gt;
&lt;p&gt;master进程不需要处理网络事件，它不负责业务的执行，只会通过管理worker等子进程
来实现重启服务、平滑升级、更换日志文件、配置文件实时生效等功能。&lt;/p&gt;
&lt;h2 id=&#34;问题探索&#34;&gt;问题探索&lt;/h2&gt;
&lt;h3 id=&#34;nginx特点&#34;&gt;nginx特点&lt;/h3&gt;
&lt;p&gt;选择Nginx的核心理由还是它能在支持高并发请求的同时保持高效的服务。&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;低内存消耗&lt;/li&gt;
&lt;li&gt;高可靠性:一个master管理进程、多个worker工作进程的设计方式&lt;/li&gt;
&lt;li&gt;高扩展性:高度模块化的设计&lt;/li&gt;
&lt;li&gt;更快&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;事件处理&#34;&gt;事件处理&lt;/h3&gt;
&lt;h3 id=&#34;开发一个简单的http模块&#34;&gt;开发一个简单的HTTP模块&lt;/h3&gt;
&lt;p&gt;todo: 开发ngx_http_mytest_module&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.open-open.com/lib/view/open1451446610308.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;参考例子&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;其他&#34;&gt;其他&lt;/h2&gt;
&lt;h3 id=&#34;vscode本地调试&#34;&gt;vscode本地调试&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;version&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;0.2.0&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nt&#34;&gt;&amp;#34;configurations&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;debug nginx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;cppdbg&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;request&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;launch&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;program&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;${workspaceFolder}/objs/nginx&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;stopAtEntry&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;cwd&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;${workspaceFolder}&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;environment&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nt&#34;&gt;&amp;#34;externalConsole&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;mkcert创建自签名ssl证书&#34;&gt;mkcert创建自签名SSL证书&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkcert -install &lt;span class=&#34;c1&#34;&gt;# 将 mkcert 的认证机构安装到服务器上&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkcert -CAROOT &lt;span class=&#34;c1&#34;&gt;# 查看 CA 证书的位置，在PC上安装 rootCA.crt 证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkcert www.aaa.com aiPlatform.dev localhost 127.0.0.1 ::1 43.139.87.74 &lt;span class=&#34;c1&#34;&gt;# 生成证书，配置在nginx.conf中&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;nginx四层转发&#34;&gt;nginx四层转发&lt;/h3&gt;
&lt;p&gt;源码编译时，执行以下命令手动加载stream模块:&lt;br&gt;
./auto/configure &amp;ndash;with-http_ssl_module &amp;ndash;prefix=/home/github/nginx &amp;ndash;with-stream&lt;br&gt;
然后在nginx.conf添加以下配置内容支持tcp转发，&lt;a class=&#34;link&#34; href=&#34;git@github.com:blessli/epoll-cpp-demo.git&#34; &gt;stream_backend程序&lt;/a&gt;:
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cfg&#34; data-lang=&#34;cfg&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;stream {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;na&#34;&gt;upstream stream_backend {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;na&#34;&gt;zone tcp_servers 64k;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;na&#34;&gt;hash $remote_addr;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;na&#34;&gt;server 127.0.0.1:18000;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;na&#34;&gt;server {&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;na&#34;&gt;listen 8000;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;na&#34;&gt;proxy_pass stream_backend;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
