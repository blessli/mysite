<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>OS on soli&#39;s blog</title>
        <link>http://localhost:1313/tags/os/</link>
        <description>Recent content in OS on soli&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 08 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/tags/os/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>操作系统介绍</title>
        <link>http://localhost:1313/2022/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</link>
        <pubDate>Sat, 08 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/2022/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</guid>
        <description>&lt;img src="https://lidongming.oss-cn-shenzhen.aliyuncs.com/mysite/img2.png" alt="Featured image of post 操作系统介绍" /&gt;&lt;h2 id=&#34;操作系统是什么&#34;&gt;操作系统是什么？&lt;/h2&gt;
&lt;p&gt;实际上，有一类软件负责让程序运行变得容易（甚至允许你同时运行多个程序），允许程序共享内存，让程序能够与设备交互，以及其他类似的有趣的工作。这些软件称为操作系统，因为它们负责&lt;em&gt;&lt;strong&gt;确保系统既易于使用又正确高效地运行&lt;/strong&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;h2 id=&#34;关键问题操作系统如何将资源虚拟化&#34;&gt;关键问题：操作系统如何将资源虚拟化&lt;/h2&gt;
&lt;p&gt;为什么操作系统这样做？这不是主要问题，因为答案应该很明显：它让系统更易于使用。因此，我们关注如何虚拟化：操作系统通过哪些机制和策略来实现虚拟化？操作系统如何有效地实现虚拟化？需要哪些硬件支持？&lt;br&gt;
操作系统将物理资源（如处理器、内存或磁盘）转换为更通用、更强大且更易于使用的虚拟形式。因此，我们有时将操作系统称为虚拟机。
因为虚拟化让许多程序运行（从而共享CPU），让许多程序可以同时访问自己的指令和数据（从而共享内存），让许多程序访问设备（从而共享磁盘等），所以操作系统有时被称为资源管理器。每个CPU、内存和磁盘都是系统的资源，因此操作系统扮演的主要角色就是管理这些资源，以做到高效或公平。&lt;/p&gt;
&lt;h3 id=&#34;虚拟化cpu&#34;&gt;虚拟化CPU&lt;/h3&gt;
&lt;p&gt;在硬件的一些帮助下，操作系统负责提供这种假象，即系统拥有非常多的虚拟CPU的假象。将单个CPU（或其中一小部分）转换为看似无限数量的CPU，从而让许多程序看似同时运行，这就是所谓的虚拟化CPU。&lt;/p&gt;
&lt;h3 id=&#34;虚拟化内存&#34;&gt;虚拟化内存&lt;/h3&gt;
&lt;p&gt;每个进程访问自己的私有虚拟地址空间（有时称为地址空间），操作系统以某种方式映射到机器的物理内存上。一个正在运行的程序中的内存引用不会影响其他进程（或操作系统本身）的地址空间。对于正在运行的程序，它完全拥有自己的物理内存。&lt;/p&gt;
&lt;h2 id=&#34;关键问题如何构建正确的并发程序&#34;&gt;关键问题：如何构建正确的并发程序&lt;/h2&gt;
&lt;p&gt;如果同一个内存空间中有很多并发执行的线程，如何构建一个正确工作的程序？操作系统需要什么原语？硬件应该提供哪些机制？我们如何利用它们来解决并发问题？&lt;/p&gt;
&lt;h2 id=&#34;关键问题如何持久地存储数据&#34;&gt;关键问题：如何持久地存储数据&lt;/h2&gt;
&lt;p&gt;文件系统是操作系统的一部分，负责管理持久的数据。持久性需要哪些技术才能正确地实现？需要哪些机制和策略才能高性能地实现？面对硬件和软件故障，可靠性如何实现？&lt;/p&gt;
&lt;h2 id=&#34;操作系统做了什么&#34;&gt;操作系统做了什么？&lt;/h2&gt;
&lt;p&gt;它取得CPU、内存或磁盘等物理资源，并对它们进行虚拟化。它处理与并发有关的麻烦且棘手的问题。它持久地存储文件，从而使它们长期安全。&lt;/p&gt;
&lt;h2 id=&#34;操作系统的设计目标&#34;&gt;操作系统的设计目标&lt;/h2&gt;
&lt;p&gt;一个最基本的目标，是建立一些&lt;em&gt;&lt;strong&gt;抽象&lt;/strong&gt;&lt;/em&gt;，让系统方便和易于使用。&lt;br&gt;
设计和实现操作系统的一个目标，是提供高性能。换言之，我们的目标是最小化操作系统的开销。&lt;br&gt;
另一个目标是在应用程序之间以及在OS和应用程序之间提供保护。&lt;br&gt;
根据系统的使用方式，操作系统将有不同的目标，因此可能至少以稍微不同的方式实现。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
