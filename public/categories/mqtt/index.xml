<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>mqtt on soli</title>
        <link>https://soli.seekincs.com/categories/mqtt/</link>
        <description>Recent content in mqtt on soli</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 13 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://soli.seekincs.com/categories/mqtt/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>MQTT Broker in Action</title>
        <link>https://soli.seekincs.com/2022/11/mqtt-broker-in-action/</link>
        <pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate>
        
        <guid>https://soli.seekincs.com/2022/11/mqtt-broker-in-action/</guid>
        <description>&lt;img src="https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png" alt="Featured image of post MQTT Broker in Action" /&gt;&lt;h2 id=&#34;emqx安装部署&#34;&gt;EMQX安装部署&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;EMQX 是一款大规模可弹性伸缩的云原生分布式物联网 MQTT 消息服务器😂。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;docker单节点多实例&#34;&gt;Docker单节点多实例&lt;/h3&gt;
&lt;p&gt;基于docker-compose+haproxy搭建伪分布式集群：&lt;br&gt;
启动：docker-compose -f docker-compose-emqx-cluster.yaml up&lt;br&gt;
关闭：docker-compose -f docker-compose-emqx-cluster.yaml down&lt;/p&gt;
&lt;h3 id=&#34;docker多节点&#34;&gt;Docker多节点&lt;/h3&gt;
&lt;p&gt;修改emqx.conf配置文件(这里选择static方式)，集群节点开放某些端口：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-conf&#34;&gt;cluster.discovery = static
cluster.static.seeds = emqx@120.92.94.79,emqx@120.92.88.242
rpc.port_discovery = manual
rpc.tcp_server_port = 5369
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;两个集群节点分别执行以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -d --name emqx_cluster -v /emqx.conf:/opt/emqx/etc/emqx.conf -v /emqx_auth_mysql.conf:/opt/emqx/etc/plugins/emqx_auth_mysql.conf -v /loaded_plugins:/opt/emqx/data/loaded_plugins --env EMQX_LOG__TO=both --env EMQX_HOST=120.92.94.79 -p 1883:1883 -p 8081:8081 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 -p 4370:4370 -p 5370:5370 -p 4369:4369 -p 5369:5369 -p 6369:6369 -p 6370:6370 emqx/emqx:4.4.4
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;k8s集群&#34;&gt;k8s集群&lt;/h3&gt;
&lt;p&gt;见另外一篇文章，传送门&lt;/p&gt;
&lt;h2 id=&#34;安全&#34;&gt;安全&lt;/h2&gt;
&lt;p&gt;安全主要包括服务端访问控制和客户端SDK安全，具体如下：&lt;br&gt;
服务端启用emqx_auth_mysql插件实现认证和授权。&lt;br&gt;
客户端SDK引入的第三方库， 要走中台统一的三方库报备、审查，看看有没有漏洞或其他风险。&lt;/p&gt;
&lt;h2 id=&#34;客户端sdk&#34;&gt;客户端SDK&lt;/h2&gt;
&lt;p&gt;一些SDK不支持mqtt5.0，其影响是pub/sub操作无法拿到原因码。一些SDK不支持断线重连。&lt;br&gt;
注意点：client_id尽量不填(或者重连时采用第一次连接后返回的client_id)，避免client_id重复导致会话互踢。&lt;br&gt;
Go版本建议选择&lt;a class=&#34;link&#34; href=&#34;https://github.com/eclipse/paho.golang&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;paho.golang&lt;/a&gt;，因为支持5.0协议。&lt;br&gt;
C++版本建议选择&lt;a class=&#34;link&#34; href=&#34;https://github.com/eclipse/paho.mqtt.cpp&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;paho.mqtt.cpp&lt;/a&gt;，也可以参考我写的&lt;a class=&#34;link&#34; href=&#34;https://github.com/blessli/mqtt-cpp-demo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;一个基于vcpkg+cmake的demo&lt;/a&gt;&lt;br&gt;
JS版本建议选择&lt;a class=&#34;link&#34; href=&#34;https://github.com/emqx/MQTT-Client-Examples/blob/master/mqtt-client-WebSocket/ws-mqtt.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ws-mqtt&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;压力验证&#34;&gt;压力验证&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/emqx/emqtt-bench&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;压测工具&lt;/a&gt;&lt;br&gt;
硬件配置：一台腾讯云服务器2c4g。&lt;br&gt;
一个master节点的k8s上运行emqx 6个pod，目前只能支持27322个订阅端，服务器CPU 100%。&lt;br&gt;&lt;/p&gt;
&lt;h3 id=&#34;遇到的问题&#34;&gt;遇到的问题&lt;/h3&gt;
&lt;p&gt;client(4): EXIT for {shutdown,eaddrinuse}&lt;br&gt;
解决方法：&lt;br&gt;
扩大端口数量&lt;br&gt;
提高端口使用率&lt;br&gt;
&lt;img src=&#34;https://soli.seekincs.com/2022/11/mqtt-broker-in-action/static/emqtt-bench-result.png&#34;
	width=&#34;1564&#34;
	height=&#34;709&#34;
	srcset=&#34;https://soli.seekincs.com/2022/11/mqtt-broker-in-action/static/emqtt-bench-result_hud14d66730ab45c2af3ddfad68006f28b_105763_480x0_resize_box_3.png 480w, https://soli.seekincs.com/2022/11/mqtt-broker-in-action/static/emqtt-bench-result_hud14d66730ab45c2af3ddfad68006f28b_105763_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;emqtt-bench-result.png&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;220&#34;
		data-flex-basis=&#34;529px&#34;
	
&gt;&lt;/p&gt;</description>
        </item>
        <item>
        <title>MQTT消息服务器在稻壳服务落地</title>
        <link>https://soli.seekincs.com/2022/10/mqtt%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%A8%E7%A8%BB%E5%A3%B3%E6%9C%8D%E5%8A%A1%E8%90%BD%E5%9C%B0/</link>
        <pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate>
        
        <guid>https://soli.seekincs.com/2022/10/mqtt%E6%B6%88%E6%81%AF%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%9C%A8%E7%A8%BB%E5%A3%B3%E6%9C%8D%E5%8A%A1%E8%90%BD%E5%9C%B0/</guid>
        <description>&lt;img src="https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png" alt="Featured image of post MQTT消息服务器在稻壳服务落地" /&gt;&lt;h2 id=&#34;mqtt是什么&#34;&gt;MQTT是什么&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;MQTT 协议的全称是 Message Queuing Telemetry Transport，翻译为消息队列传输探测。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;MQTT是一个轻量的发布订阅模式消息传输协议，专门针对低带宽和不稳定网络环境的物联网应用设计。&lt;br&gt;
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/WechatIMG214.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;mqtt的特点及应用&#34;&gt;MQTT的特点及应用&lt;/h3&gt;
&lt;h4 id=&#34;特点&#34;&gt;特点&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;开放消息协议，简单易实现&lt;/li&gt;
&lt;li&gt;发布订阅模式，一对多消息发布&lt;/li&gt;
&lt;li&gt;基于TCP/IP网络连接&lt;/li&gt;
&lt;li&gt;1字节固定报头，2字节心跳报文，报文结构紧凑&lt;/li&gt;
&lt;li&gt;消息QoS支持，可靠传输保证&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;应用&#34;&gt;应用&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;内网服务调用，比如代码构建服务&lt;/li&gt;
&lt;li&gt;客户端插件下发&lt;/li&gt;
&lt;li&gt;站内信/消息中心&lt;/li&gt;
&lt;li&gt;业务开关&lt;/li&gt;
&lt;li&gt;支付状态回调（前端接收）&lt;/li&gt;
&lt;li&gt;页面方法调用（下发一段js脚本，innerHTML到页面执行）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mqtt协议数据包&#34;&gt;MQTT协议数据包&lt;/h3&gt;
&lt;p&gt;从Wireshark抓包工具中可以看到MQTT协议位于应用层，协议结构简单，分别由固定头、可变头、消息体三部分组成，最多可以有16种报文类型。&lt;br&gt;
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/QQ%E6%88%AA%E5%9B%BE/WechatIMG212.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;fixed-header&#34;&gt;Fixed Header&lt;/h4&gt;
&lt;p&gt;所有MQTT报文类型都包含&lt;br&gt;
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/QQ%E6%88%AA%E5%9B%BE/WechatIMG213.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;variable-header&#34;&gt;Variable Header&lt;/h4&gt;
&lt;p&gt;不同的报文类型会不同，比如PUBACK报文、CONNECT报文&lt;br&gt;
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/QQ%E6%88%AA%E5%9B%BE/WechatIMG210.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;payload&#34;&gt;Payload&lt;/h4&gt;
&lt;p&gt;不同的报文类型会不同，比如CONNECT报文。&lt;/p&gt;
&lt;h3 id=&#34;消息发布质量qos&#34;&gt;消息发布质量(QoS)&lt;/h3&gt;
&lt;p&gt;订阅者收到MQTT消息的QoS级别，最终取决于发布消息的QoS和主题订阅的QoS(取两者最小)。&lt;br&gt;
QoS 0：消息至多送达一次 (At most once delivery)&lt;br&gt;
允许消息少量丢失，最多传输一次&lt;br&gt;
QoS 1：消息至少送达一次 (At least once delivery)&lt;br&gt;
确保消息一定到达，可少量重复&lt;br&gt;
QoS 2：消息只送达一次 (Exactly once delivery)&lt;br&gt;
避免消息重复或丢失会导致不正确的结果
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/QQ%E6%88%AA%E5%9B%BE/WechatIMG209.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;mqtt在服务端的应用-稻壳pc前端插件构建任务下发为例&#34;&gt;MQTT在服务端的应用-稻壳PC前端插件构建任务下发为例&lt;/h2&gt;
&lt;h3 id=&#34;背景&#34;&gt;背景&lt;/h3&gt;
&lt;p&gt;前端插件打包需要从git仓库拉取代码，考虑到安全问题，代码构建服务部署在内网金山云主机上。在前端同学提交工单后，运维人员需要手动发起构建任务生成的版本号再配置在对OP后台。&lt;br&gt;
为了降低人工运维成本，将原本人工处理升级为自动化PC端插件下发，这个过程中需要解决外网服务如何调用内网服务的问题(注：代码构建服务部署在内网，无法被外网服务寻址到)。&lt;/p&gt;
&lt;h3 id=&#34;设计与实现&#34;&gt;设计与实现&lt;/h3&gt;
&lt;p&gt;设计理念：计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。&lt;br&gt;
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/QQ%E6%88%AA%E5%9B%BE/WechatIMG208.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;核心代码&#34;&gt;核心代码&lt;/h4&gt;
&lt;p&gt;订阅端断线自动重连，并自动订阅成功的关键代码&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func NewMqtt() {
    serverURL, err := url.Parse(&amp;quot;tcp://xxx.xxx.xxx.xxx:1883&amp;quot;)
    if err != nil {
        panic(fmt.Errorf(&amp;quot;environmental variable %s must be a valid URL (%w)&amp;quot;, serverURL, err))
    }
    h := NewHandler(true, &amp;quot;sub.log&amp;quot;, true)
    defer h.Close()

    cliCfg := autopaho.ClientConfig{
        BrokerUrls: []*url.URL{serverURL},
        KeepAlive:  30,
        OnConnectionUp: func(cm *autopaho.ConnectionManager, connAck *paho.Connack) {
            fmt.Println(&amp;quot;mqtt connection up&amp;quot;)
            if _, err := cm.Subscribe(context.Background(), &amp;amp;paho.Subscribe{
                Subscriptions: map[string]paho.SubscribeOptions{
                    &amp;quot;testtopic&amp;quot;: {QoS: byte(1)}, // 订阅testtopic主题
                },
            }); err != nil {
                fmt.Printf(&amp;quot;failed to subscribe (%s). This is likely to mean no messages will be received.&amp;quot;, err)
                return
            }
            fmt.Println(&amp;quot;mqtt subscription made&amp;quot;)
        },
        OnConnectError: func(err error) { fmt.Printf(&amp;quot;error whilst attempting connection: %s\n&amp;quot;, err) },
        ClientConfig: paho.ClientConfig{
            ClientID: &amp;quot;deploy.docer.wps.cn&amp;quot;, // 客户端标识
            Router: paho.NewSingleHandlerRouter(func(m *paho.Publish) {
                h.handle(m) // 业务逻辑处理
            }),
            OnClientError: func(err error) { fmt.Printf(&amp;quot;server requested disconnect: %s\n&amp;quot;, err) },
            OnServerDisconnect: func(d *paho.Disconnect) {
                if d.Properties != nil {
                    fmt.Printf(&amp;quot;server requested disconnect: %s\n&amp;quot;, d.Properties.ReasonString)
                } else {
                    fmt.Printf(&amp;quot;server requested disconnect; reason code: %d\n&amp;quot;, d.ReasonCode)
                }
            },
        },
    }
    cliCfg.SetConnectPacketConfigurator(func(c *paho.Connect) *paho.Connect {
        c.CleanStart = false // 开启持久会话
        return c
    })
    cliCfg.SetUsernamePassword(config.Config.Mqtt.Username, []byte(config.Config.Mqtt.Password)) // 用户名/密码认证
    cliCfg.Debug = logger{prefix: &amp;quot;autoPaho&amp;quot;}
    cliCfg.PahoDebug = logger{prefix: &amp;quot;paho&amp;quot;}
    //
    // Connect to the broker
    //
    ctx, cancel := context.WithCancel(context.Background())
    defer cancel()
    cm, err := autopaho.NewConnection(ctx, cliCfg)
    if err != nil {
        panic(err)
    }
    sig := make(chan os.Signal, 1)
    signal.Notify(sig, os.Interrupt)
    signal.Notify(sig, syscall.SIGTERM)

    &amp;lt;-sig
    fmt.Println(&amp;quot;signal caught - exiting&amp;quot;)
    ctx, cancel = context.WithTimeout(context.Background(), 5*time.Second)
    defer cancel()
    _ = cm.Disconnect(ctx)

    fmt.Println(&amp;quot;shutdown complete&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;问题&#34;&gt;问题&lt;/h4&gt;
&lt;p&gt;• Broker暴露在公网，如何做好访问控制？&lt;br&gt;
• 发布/订阅模式下，如何保证消息下发成功率？&lt;br&gt;
• Broker用在通用化场景，如何保证高可用？&lt;/p&gt;
&lt;h3 id=&#34;开源-mqtt-broker-对比&#34;&gt;开源 MQTT Broker 对比&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;竞品&lt;/th&gt;
&lt;th&gt;开发语言&lt;/th&gt;
&lt;th&gt;Star数&lt;/th&gt;
&lt;th&gt;优点&lt;/th&gt;
&lt;th&gt;缺点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;EMQX&lt;/td&gt;
&lt;td&gt;erlang&lt;/td&gt;
&lt;td&gt;10.4k&lt;/td&gt;
&lt;td&gt;功能全面，文档齐全，社区活跃，完善的运维配套&lt;/td&gt;
&lt;td&gt;erlang语言，对于其他语言的开发者自己扩展有一定难度。开源版本不支持消息持久化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mosquitto&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;td&gt;6.6k&lt;/td&gt;
&lt;td&gt;足够轻量，可以运行在任何低功率单片机上&lt;/td&gt;
&lt;td&gt;c实现，对于其他语言的开发者很难扩展&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;目前最好选择是&lt;a class=&#34;link&#34; href=&#34;https://www.emqx.io/docs/zh/v5.0/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;EMQX&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;消息下发成功率&#34;&gt;消息下发成功率&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;服务发布质量：Broker提供3种QoS，通常选择QoS 1报文(至少送达一次)来兼顾吞吐量和发布质量。&lt;/li&gt;
&lt;li&gt;订阅端断线重连：选择合适的客户端SDK并配置对应参数，使用CleanSession=false来开启持久化订阅模式。&lt;/li&gt;
&lt;li&gt;性能测试：经过压测发现，未确认的QoS 1报文数量超过max_mqueue_len参数会丢失消息。&lt;/li&gt;
&lt;li&gt;消息状态码：客户端SDK需要支持MQTT 5.0协议，这样每次connect/pub/sub操作才能得到正确的状态码。&lt;br&gt;
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/QQ%E6%88%AA%E5%9B%BE/WechatIMG206.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/QQ%E6%88%AA%E5%9B%BE/WechatIMG207.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;mqtt-broker高可用&#34;&gt;MQTT Broker高可用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;负载均衡：使用HAProxy作为整个集群的接入点，反向代理MQTT Broker。&lt;/li&gt;
&lt;li&gt;粘性会话：在重新连接时将客户端路由到之前服务器，以粘性方式分派连接。&lt;/li&gt;
&lt;li&gt;监控告警：Broker内置监控与告警功能，支持CPU、内存等资源状态进行告警，管理后台可查询。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/QQ%E6%88%AA%E5%9B%BE/WechatIMG205.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;访问控制&#34;&gt;访问控制&lt;/h3&gt;
&lt;h4 id=&#34;实现原理&#34;&gt;实现原理&lt;/h4&gt;
&lt;p&gt;EMQX本身的设计是插件化架构，启用emqx_auth_mysql.conf插件，根据该配置文件中的模板化SQL查询语句即可实现灵活的访问控制。
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/QQ%E6%88%AA%E5%9B%BE/WechatIMG204.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;认证&#34;&gt;认证&lt;/h4&gt;
&lt;p&gt;用户名/密码认证防止非法客户端连接。
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/WechatIMG203.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;认证&#34;
	
	
&gt;&lt;/p&gt;
&lt;h4 id=&#34;授权&#34;&gt;授权&lt;/h4&gt;
&lt;p&gt;对 MQTT 客户端的发布和订阅操作进行权限控制。控制哪些客户端可以发布或者订阅哪些MQTT主题。&lt;br&gt;
&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/WechatIMG202.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;授权&#34;
	
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;常见问题&#34;&gt;常见问题&lt;/h2&gt;
&lt;h3 id=&#34;消息持久化&#34;&gt;消息持久化&lt;/h3&gt;
&lt;p&gt;MQTT消息publish出来没有接受者就会丢失，持久化的能力是指，对所有的消息进行记录，把数据持久化下来。emqx是broker不是消息队列，持久化属于拓展的能力。emqx开源版不支持服务器内部消息持久化，这是一个架构设计选择。而且emqx 解决的核心问题是处理海量的并发 MQTT 连接与路由消息，在概念上更像是网络路由器，保证服务质量是第一要求，宕机的可能非常小。&lt;br&gt;
解决方法：根据业务场景决定是否需要拓展持久化功能，若需要则选择emqx企业版，通过自带的规则引擎或插件的方式，持久化消息到Redis、MongoDB、MySQL等数据库，以及 RabbitMQ、Kafka 等消息队列。&lt;/p&gt;
&lt;h3 id=&#34;断线重连收不到消息&#34;&gt;断线重连收不到消息&lt;/h3&gt;
&lt;p&gt;解决方法：使用 CleanSession=false来开启持久化订阅模式。&lt;br&gt;
客户端下线后，emqx 会为这个设备保留一个会话（Session），它在被清理前都会一直收消息。除非会话被清理（默认2h）；消息队列满了也会丢弃不再存储（默认1000）；存储方式是内存的，重启会全部丢掉。&lt;/p&gt;
&lt;h3 id=&#34;连接异常断开&#34;&gt;连接异常断开&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;客户端本身的接收buffer满了，broker收不到心跳包则会认为客户端已不存活，主动断开连接。因此尽量加快客户端的处理速度。&lt;/li&gt;
&lt;li&gt;不同的客户端使用相同的Client ID连接Broker时，连接会被强制断开。因此需要确保Client ID全局唯一，不能重复。&lt;/li&gt;
&lt;li&gt;权限不匹配。需要检查acl.conf和emqx_auth_mysql.conf配置文件，以及数据库中是否授予了pub/sub权限。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;broker重启订阅端重连订阅成功收不到消息&#34;&gt;Broker重启，订阅端重连订阅成功，收不到消息&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/WechatIMG215.jpg&#34;
	
	
	
	loading=&#34;lazy&#34;
	
	
&gt;
图中关键日志：[warning] [CM] kicked_an_unknown_session deploy.docer.wps.cn&lt;br&gt;
从管理后台的集群只有一个节点判断，是集群问题，订阅端虽然重连成功但连接到了未在集群内的节点，订阅端以为订阅成功，但broker感知不到，发布端发送消息而订阅端收不到消息。&lt;br&gt;
解决方法：Broker重启后，需要确保静态集群保证有全部的两个节点，如果节点缺失，手动执行命令：emqx_ctl cluster join &lt;a class=&#34;link&#34; href=&#34;mailto:emqx@node2.emqx.io&#34; &gt;emqx@node2.emqx.io&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;本文主要是介绍MQTT消息服务器在稻壳服务落地的实战过程中遇到的一些问题以及解决方案。MQTT消息服务器目前实现了协议接入、集群部署、接入安全等主要功能，能稳定承载百分级客户端连接。稻壳的很多业务场景都可以接入MQTT消息服务器的发布订阅能力来提效和精准触达用户，能为业务带来一定的价值。&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
