[{"content":"为什么需要HTTP/2","date":"2022-10-09T00:00:00Z","image":"http://localhost:1313/2022/10/http/2-in-action/img_hu83a171994bb98f360a5bcee0ed3e9848_758991_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/10/http/2-in-action/","title":"HTTP/2 in Action"},{"content":" 从在浏览器中输入网址，到屏幕上显示出网页的内容，在这个只有几秒钟的过程中，很多硬件和软件都在各自的岗位上相互配合完成了一系列的工作。\n浏览器生成消息 用电信号传输TCP/IP 从网络到网络设备 通过接入网进入互联网内部 请求到达web服务器，响应返回浏览器","date":"2022-10-09T00:00:00Z","image":"http://localhost:1313/2022/10/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/img_hub6a36240a99ccd64bef3d86e2b387273_65470_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/10/%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/","title":"网络是怎样连接的"},{"content":" 平凡的世界 法治的细节 操作系统导论 朗读者 ","date":"2022-10-08T00:00:00Z","image":"http://localhost:1313/2022/10/2022%E4%B9%A6%E5%8D%95/img_hub6a36240a99ccd64bef3d86e2b387273_65470_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/10/2022%E4%B9%A6%E5%8D%95/","title":"2022书单"},{"content":"操作系统是什么？ 实际上，有一类软件负责让程序运行变得容易（甚至允许你同时运行多个程序），允许程序共享内存，让程序能够与设备交互，以及其他类似的有趣的工作。这些软件称为操作系统，因为它们负责确保系统既易于使用又正确高效地运行。\n关键问题：操作系统如何将资源虚拟化 为什么操作系统这样做？这不是主要问题，因为答案应该很明显：它让系统更易于使用。因此，我们关注如何虚拟化：操作系统通过哪些机制和策略来实现虚拟化？操作系统如何有效地实现虚拟化？需要哪些硬件支持？\n操作系统将物理资源（如处理器、内存或磁盘）转换为更通用、更强大且更易于使用的虚拟形式。因此，我们有时将操作系统称为虚拟机。 因为虚拟化让许多程序运行（从而共享CPU），让许多程序可以同时访问自己的指令和数据（从而共享内存），让许多程序访问设备（从而共享磁盘等），所以操作系统有时被称为资源管理器。每个CPU、内存和磁盘都是系统的资源，因此操作系统扮演的主要角色就是管理这些资源，以做到高效或公平。\n虚拟化CPU 在硬件的一些帮助下，操作系统负责提供这种假象，即系统拥有非常多的虚拟CPU的假象。将单个CPU（或其中一小部分）转换为看似无限数量的CPU，从而让许多程序看似同时运行，这就是所谓的虚拟化CPU。\n虚拟化内存 每个进程访问自己的私有虚拟地址空间（有时称为地址空间），操作系统以某种方式映射到机器的物理内存上。一个正在运行的程序中的内存引用不会影响其他进程（或操作系统本身）的地址空间。对于正在运行的程序，它完全拥有自己的物理内存。\n关键问题：如何构建正确的并发程序 如果同一个内存空间中有很多并发执行的线程，如何构建一个正确工作的程序？操作系统需要什么原语？硬件应该提供哪些机制？我们如何利用它们来解决并发问题？\n关键问题：如何持久地存储数据 文件系统是操作系统的一部分，负责管理持久的数据。持久性需要哪些技术才能正确地实现？需要哪些机制和策略才能高性能地实现？面对硬件和软件故障，可靠性如何实现？\n操作系统做了什么？ 它取得CPU、内存或磁盘等物理资源，并对它们进行虚拟化。它处理与并发有关的麻烦且棘手的问题。它持久地存储文件，从而使它们长期安全。\n操作系统的设计目标 一个最基本的目标，是建立一些抽象，让系统方便和易于使用。\n设计和实现操作系统的一个目标，是提供高性能。换言之，我们的目标是最小化操作系统的开销。\n另一个目标是在应用程序之间以及在OS和应用程序之间提供保护。\n根据系统的使用方式，操作系统将有不同的目标，因此可能至少以稍微不同的方式实现。\n","date":"2022-10-08T00:00:00Z","image":"http://localhost:1313/2022/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/img_hub6a36240a99ccd64bef3d86e2b387273_65470_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/10/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/","title":"操作系统介绍"},{"content":"如果题目是求一个问题的最优解（通常是求最大值或最小值），或者求问题的解的数目（或判断问题是否存在解），那么这个题目有可能适合运用动态规划。\n在采用动态规划时总是用递归的思路分析问题，即把大问题分解成小问题，再把小问题的解合起来形成大问题的解。找出描述大问题的解和小问题的解之间递归关系的状态转移方程是采用动态规划解决问题的关键所在。\n单序列问题、双序列问题、矩阵路径问题和背包问题。\n","date":"2022-10-08T00:00:00Z","image":"http://localhost:1313/2022/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/img_hub6a36240a99ccd64bef3d86e2b387273_65470_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/10/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/","title":"动态规划"},{"content":"","date":"2022-07-10T00:00:00Z","image":"http://localhost:1313/2022/07/%E5%88%86%E5%B8%83%E5%BC%8Fid%E7%94%9F%E6%88%90%E5%99%A8/img_huf8a5d43c43a496ea46c5f06d90045146_501717_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/07/%E5%88%86%E5%B8%83%E5%BC%8Fid%E7%94%9F%E6%88%90%E5%99%A8/","title":"分布式ID生成器"},{"content":"\n实战 server.crt证书文件和server.key私钥文件\nNginx 服务器 SSL 证书安装部署\n","date":"2022-07-09T00:00:00Z","image":"http://localhost:1313/2022/07/https%E7%AE%80%E4%BB%8B/static/img_hud476b33944c499d2cb65151e37d9bcd0_881403_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/07/https%E7%AE%80%E4%BB%8B/","title":"HTTPS简介"},{"content":"","date":"2022-07-09T00:00:00Z","image":"http://localhost:1313/2022/07/http%E5%90%84%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB/img_hu83a171994bb98f360a5bcee0ed3e9848_758991_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/07/http%E5%90%84%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB/","title":"HTTP各版本区别"},{"content":"传输控制协议TCP协议概述 TCP最主要的特点 TCP的连接 可靠传输的工作原理 停止等待协议 连续ARQ协议 TCP可靠传输的实现 以字节为单位的滑动窗口 超时重传时间的选择 选择确认SACK TCP的流量控制 利用滑动窗口实现流量控制 TCP的传输效率 TCP的拥塞控制 拥塞控制的一般原理 TCP的拥塞控制方法 TCP的运输连接管理 连接建立 连接释放 TCP常见问题讨论 time_wait和close_wait产生过多的原因和解决方法 ","date":"2022-07-09T00:00:00Z","image":"http://localhost:1313/2022/07/%E7%BD%91%E7%BB%9C%E4%B9%8B%E8%BF%90%E8%BE%93%E5%B1%82tcp%E5%8D%8F%E8%AE%AE/static/img_hud01d8210e5842c1fcbf6a8cf2dff2ee2_821787_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/07/%E7%BD%91%E7%BB%9C%E4%B9%8B%E8%BF%90%E8%BE%93%E5%B1%82tcp%E5%8D%8F%E8%AE%AE/","title":"网络之运输层TCP协议"},{"content":"【踩坑一】函数编写 package main import \u0026quot;fmt\u0026quot; func func1() error { return nil } // 推荐这样写，考虑因素：函数入参、返回值、函数局部变量初始化 func correctShow(ids ...int64) (err error) { keys := make([]string, 0, len(ids)) for _, id := range ids { keys = append(keys, fmt.Sprintf(\u0026quot;data_%d\u0026quot;, id)) } if err = func1(); err != nil { return } return } // 不推荐这样写 func errorShow(ids []int64) error { var keys []string for _, id := range ids { keys = append(keys, fmt.Sprintf(\u0026quot;data_%d\u0026quot;, id)) } if err := func1(); err != nil { return err } return nil } 【vendor】踩坑二","date":"2022-07-06T00:00:00Z","image":"http://localhost:1313/2022/07/golang%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/img_hu077198f7a0913080730abaa1524e5d48_648242_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/07/golang%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/","title":"golang踩坑记录"},{"content":"技术分享目的 影响力 需求实现类 技术优化类 参考引用 技术文章的选题，有没有什么方法论？\n技术分享PPT\n","date":"2022-07-06T00:00:00Z","image":"http://localhost:1313/2022/07/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/img_huf1b14d0d7fb593b4953229bebc00b984_821598_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/07/%E6%8A%80%E6%9C%AF%E5%88%86%E4%BA%AB/","title":"技术分享"},{"content":"Golang概述 Channel GMP调度模型 Mutex WaitGroup ","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/golang%E7%AE%80%E4%BB%8B/static/img_hua1a6672696f4b0f4b969b0a99f631712_901853_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/golang%E7%AE%80%E4%BB%8B/","title":"golang简介"},{"content":"k8s概述 自动化运维管理Docker(容器化)程序。\n核心特性 pod状态流转 ","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/k8s-notes/img_hu12775f9ad2d350f4eaadfc08e9ad4b40_713464_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/k8s-notes/","title":"k8s-notes"},{"content":"Kafka概述 体系架构、多副本机制、分区机制。\nKafka的生产者(客户端) Kafka的消费者(客户端) Kafka的服务端 Kafka的协调者 Kafka的存储层 Kafka日志结构 Kafka常见问题讨论 Kafka是如何保障数据不丢失的？ 如何解决Kafka数据丢失问题？ Kafka可以保障永久不丢失数据吗？ 如何保障Kafka中的消息是有序的？ 如何确定Kafka主题的分区数量？ 如何调整生产环境中Kafka主题的分区数量？ 如何重平衡Kafka集群？ 如何查看消费者组是否存在滞后消费？ PageCache 缓存最近被访问的数据 预读功能 消息顺序性问题 分区有序而不是主题有序。分区有序是通过offset实现的。\n分区机制 一个主题不可能只对应一个文件(单机I/O会成为性能瓶颈) 一个主题包含多个分区，每个分区是一个可追加的日志文件。不同分区在不同broker上。\n消息中间件选型 功能维度(延时队列) 性能维度() 可靠性和可用性 运维管理 社区力度和生态发展 ","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/kafka%E7%AE%80%E4%BB%8B/img_hu7f23b3a64bd1dfa706352f2ec1f13407_619022_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/kafka%E7%AE%80%E4%BB%8B/","title":"kafka简介"},{"content":"索引 索引底层数据结构选型 哈希表、二叉查找树、平衡二叉树、B树、B+树、跳表。\n事务 并发事务问题 脏读、不可重复读、幻读。\n日志 redo、undo、bin。\n锁 行锁和表锁。\n乐观锁MVCC 可重复读：事务开始的时候生成一个当前事务全局性的快照\n读提交：每次执行语句的时候都重新生成一次快照\n对于一个快照来说，它能够读到那些版本数据，要遵循以下规则：\n当前事务内的更新，可以读到；\n版本未提交，不能读到\n版本已提交，但是却在快照创建后提交的，不能读到 版本已提交，且是在快照创建前提交的，可以读到\n","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/mysql-notes/img_hu28fe21d521fd2003aa8ae5ffeef12874_671518_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/mysql-notes/","title":"mysql-notes"},{"content":"防SQL注入 禁止使用拼接SQL方式\nPreparedStatement 正则表达式 字符串过滤 字段类型与查询类型不一致导致不走索引 third_id字段类型是varchar，参数传的却是数字，从而导致了慢SQL\n错误的SQL\nSELECT * FROM `meta` WHERE `audit_pass`=1 and `state`=1 and third_id in(1,2,3) 正确的SQL\nSELECT * FROM `meta` WHERE `audit_pass`=1 and `state`=1 and third_id in('1','2','3') ","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/mysql%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/img_hu266c5e8d9a6a1c7cdbaed825f5d024be_1166153_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/mysql%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/","title":"mysql踩坑记录"},{"content":"Redis概述 核心数据结构 持久化 RDB+AOF混用\nI/O多路复用 Redis常见问题讨论 击穿问题：底层数据库有数据而缓存内没有数据 穿透问题：底层数据库没有数据且缓存内也没有数据。解决方法：布隆过滤器 雪崩问题：缓存击穿的\u0026quot;大面积\u0026quot;版 ","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/redis-notes/img_hu0db6b5bb4988a377be6426e086456154_916120_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/redis-notes/","title":"redis-notes"},{"content":"Spark概述 一个高效通用的内存型分布式计算框架。\nSpark特点：\n速度快 易用使用 通用性 运行模式多样 Spark作业基本运行原理 运行流程 ","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/spark%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/img_huc8205230f9dc59ad63b8b49c1337198e_814699_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/spark%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/","title":"spark原理浅析"},{"content":"做事方法论 另外我们做一件事的时候，需要时刻提醒自己，要想清楚三个问题：\n弄清楚，为什么做这件事？做这件事的价值是什么 去思考，如何做这件事？ 完成后的产出是什么，明确衡量标准 ","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/%E7%9F%AD%E7%BD%91%E5%9D%80/img_huf8a5d43c43a496ea46c5f06d90045146_501717_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/%E7%9F%AD%E7%BD%91%E5%9D%80/","title":"短网址"},{"content":"面试官要招什么样的人 基础团队：招聘初级开发，看重潜力、算法和技术热情，工作经验以及职业发展方向是否匹配 小公司：看重快速学习，快速了解业务、一个人带动几个人的能力 面试中 自信 语言精简，抓重点 面试前 面试考察内容 实战、基础、学习能力、拓展能力，认知能力\n面试中 自我介绍 项目介绍 技术问答 代码考核 反问环节 面试后 复盘反思 死记硬背的只是文字，融会贯通才是根本，而面试只是表象。\n","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/%E5%87%A0%E5%9C%BA%E9%9D%A2%E8%AF%95%E4%B8%8B%E6%9D%A5%E7%9A%84%E5%8F%8D%E6%80%9D%E4%B8%8E%E6%84%9F%E6%82%9F/img_hu8c6a786c2ba9c05123b08c78348c1eff_521817_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/%E5%87%A0%E5%9C%BA%E9%9D%A2%E8%AF%95%E4%B8%8B%E6%9D%A5%E7%9A%84%E5%8F%8D%E6%80%9D%E4%B8%8E%E6%84%9F%E6%82%9F/","title":"几场面试下来的反思与感悟"},{"content":"做事方法论 另外我们做一件事的时候，需要时刻提醒自己，要想清楚三个问题：\n弄清楚，为什么做这件事？做这件事的价值是什么 去思考，如何做这件事？ 完成后的产出是什么，明确衡量标准 ","date":"2022-06-18T00:00:00Z","image":"http://localhost:1313/2022/06/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/img_huf8a5d43c43a496ea46c5f06d90045146_501717_120x120_fill_box_smart1_3.png","permalink":"http://localhost:1313/2022/06/%E4%B8%9A%E5%8A%A1%E5%BC%80%E5%8F%91/","title":"业务开发"}]