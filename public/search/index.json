[{"content":"","date":"2022-11-14T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/c-in-action/","title":"C++ in Action"},{"content":"编译 编译脚本(all.bash/make.bash)中注释掉，跳过编译test，否则太慢\nmkdir -p ~/mygo/bin cd ~/mygo/bin ln -sf /usr/local/projs/go/bin/go mygo mygo version mygo run helloworld.go ","date":"2022-11-14T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/go-source-code-learning/","title":"go source code learning"},{"content":"wireshark捕获grpc消息 ","date":"2022-11-14T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/grpcgo-source-code-learning/","title":"grpcgo source code learning"},{"content":"跨vpc搭建k8s集群","date":"2022-11-14T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/k8s-cluster-in-action/","title":"k8s cluster in Action"},{"content":"centos版本\ncat /etc/redhat-release alias 解决重启后alias失效问题：\nvim ~/.bashrc alias cdcode='cd /usr/local/projs' source ~/.bashrc 查看项目代码行数 yum -y install cloc cloc src ","date":"2022-11-14T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/linux-cmd-collection/","title":"linux cmd collection"},{"content":"mysql8.0.24源码编译安装 主要是参考这篇文章，操作过程中根据报错进行fix\nvscode本地调试mysql8.0.24 { \u0026quot;version\u0026quot;: \u0026quot;0.2.0\u0026quot;, \u0026quot;configurations\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;debug mysql\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;cppdbg\u0026quot;, \u0026quot;request\u0026quot;: \u0026quot;launch\u0026quot;, \u0026quot;program\u0026quot;: \u0026quot;/usr/local/mysql/bin/mysqld\u0026quot;, \u0026quot;args\u0026quot;: [\u0026quot;--defaults-file=/usr/local/mysql/etc/my.cnf\u0026quot;], \u0026quot;stopAtEntry\u0026quot;: false, \u0026quot;cwd\u0026quot;: \u0026quot;${workspaceFolder}\u0026quot;, \u0026quot;environment\u0026quot;: [], \u0026quot;externalConsole\u0026quot;: false } ] } 源码剖析 todo tomorrow\u0026hellip;\n","date":"2022-11-14T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/mysql-source-code-learning/","title":"mysql source code learning"},{"content":"vscode本地调试 { \u0026quot;version\u0026quot;: \u0026quot;0.2.0\u0026quot;, \u0026quot;configurations\u0026quot;: [ { \u0026quot;name\u0026quot;: \u0026quot;debug redis\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;cppdbg\u0026quot;, \u0026quot;request\u0026quot;: \u0026quot;launch\u0026quot;, \u0026quot;program\u0026quot;: \u0026quot;${workspaceFolder}/src/redis-server\u0026quot;, \u0026quot;args\u0026quot;: [\u0026quot;redis.conf\u0026quot;], \u0026quot;stopAtEntry\u0026quot;: false, \u0026quot;cwd\u0026quot;: \u0026quot;${workspaceFolder}\u0026quot;, \u0026quot;environment\u0026quot;: [], \u0026quot;externalConsole\u0026quot;: false } ] } redis-benchmark压测 cd /usr/local/projs/redis/src \u0026amp;\u0026amp; ./redis-benchmark -h ./redis-benchmark -t set -n 1000000 -r 100000000 47496.91 requests per second ./redis-benchmark -t set -n 1000000 -r 100000000 -P 16 291290.41 requests per second 查看RDB快照文件 rdb -c memory dump.rdb \u0026gt; dump_rdb.csv\n其中：size_in_bytes 内存的大小，由此可以查询内存最高的key\n","date":"2022-11-14T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/redis-source-code-learning/","title":"redis source code learning"},{"content":"MQTT协议 使用wireshark工具捕获mqtt协议包，主要包括3.0和5.0版本。\nEMQX部署 EMQX 是一款大规模可弹性伸缩的云原生分布式物联网 MQTT 消息服务器😂。\nDocker单节点多实例 基于docker-compose+haproxy搭建伪分布式集群。 docker-compose -f docker-compose-emqx-cluster.yaml up\ndocker-compose -f docker-compose-emqx-cluster.yaml down\nDocker多节点 修改emqx.conf配置文件，集群节点开放某些端口\ncluster.discovery = static cluster.static.seeds = emqx@120.92.94.79,emqx@120.92.88.242 rpc.port_discovery = manual rpc.tcp_server_port = 5369 两个集群节点分别执行docker run命令：\ndocker run -d --name emqx_cluster -v /emqx.conf:/opt/emqx/etc/emqx.conf -v /emqx_auth_mysql.conf:/opt/emqx/etc/plugins/emqx_auth_mysql.conf -v /loaded_plugins:/opt/emqx/data/loaded_plugins --env EMQX_LOG__TO=both --env EMQX_HOST=120.92.94.79 -p 1883:1883 -p 8081:8081 -p 8083:8083 -p 8084:8084 -p 8883:8883 -p 18083:18083 -p 4370:4370 -p 5370:5370 -p 4369:4369 -p 5369:5369 -p 6369:6369 -p 6370:6370 emqx/emqx:4.4.4 k8s集群 见另外一篇文章，传送门\n安全 接入安全 服务端访问控制，主要是启用emqx_auth_mysql插件实现认证和授权。\n客户端SDK安全 SDK引入了第三方库， 要走中台统一的三方库报备、审查，看看有没有漏洞或其他风险。\n客户端SDK MQTT Go 客户端库 MQTT C++ 客户端库 MQTT JavaScript 客户端库 压力验证 压测工具\n硬件配置：\n一台腾讯云服务器2核4g\n一个master节点的k8s上运行emqx 6个pod，目前只能支持27322个订阅端，服务器CPU 100%。\n遇到的问题 client(4): EXIT for {shutdown,eaddrinuse}\n解决方法：\n扩大端口数量\n提高端口使用率\n","date":"2022-11-13T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/mqtt-broker-in-action/","title":"MQTT Broker in Action"},{"content":"\n背景 当需要提供一种新能力，考虑到成本问题，我们往往不会从0到1开发一个服务器，而是先在开源产品中选型对比，看是否已有能满足自身需求的开源产品(不重复造轮子的原则)。因为对开源服务器的不熟悉，部署过程中会踩这样那样的坑，效率比较低，如何快速部署并应用于实际业务场景呢？\n随便提一下，私有化部署的原因主要是考虑到数据安全，安全无小事，安全大于一切 准备工作 云主机(内部安装了docker、docker-compose、防火墙开放指定端口) 个人电脑(内部安装了docker-desktop、xshell、vscode、golang) 仔细看官方文档以及官方开源社区 注意：emqx是4.4.4版本\n部署 预期效果 (配置文件、日志)文件/目录挂载到本地磁盘\n监控、告警、可视化等功能\n协议接入、集群部署、接入安全 具体流程 个人电脑 -\u0026gt; 云主机\n单机版 -\u0026gt; 集群版(负载均衡) 启动 仔细检查docker-compose-emqx-cluster.yaml 配置文件，否则会启动失败\n启动命令： docker-compose -f docker-compose-emqx-cluster.yaml up \u0026amp; 退出命令： docker-compose -f docker-compose-emqx-cluster.yaml down 接入安全 服务端访问控制 在loaded_plugins配置文件中启用emqx_auth_mysql插件。 1 2 3 4 5 6 7 8 9 {emqx_management,true}. {emqx_dashboard,true}. {emqx_modules,false}. {emqx_recon,true}. {emqx_retainer,true}. {emqx_telemetry,true}. {emqx_rule_engine,true}. {emqx_bridge_mqtt,false}. {emqx_auth_mysql,true}. emqx默认是不设置权限，需要修改acl.conf启用鉴权。 1 2 3 {allow, {user, \u0026#34;dashboard\u0026#34;}, subscribe, [\u0026#34;$SYS/#\u0026#34;]}. {allow, {ipaddr, \u0026#34;127.0.0.1\u0026#34;}, pubsub, [\u0026#34;$SYS/#\u0026#34;, \u0026#34;#\u0026#34;]}. {deny, all, subscribe, [\u0026#34;$SYS/#\u0026#34;, {eq, \u0026#34;#\u0026#34;}]}. 修改emqx_auth_mysql.conf配置文件：修改数据库实例，创建认证表和授权表。\n用户名/密码认证防止非法客户端连接。 1 2 3 4 5 6 7 8 9 10 CREATE TABLE `mqtt_user` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(100) DEFAULT NULL, `password` varchar(100) DEFAULT NULL, `salt` varchar(35) DEFAULT NULL, `is_superuser` tinyint(1) DEFAULT \u0026#39;0\u0026#39;, `created` datetime DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `mqtt_username` (`username`) ) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 对 MQTT 客户端的发布和订阅操作进行权限控制。控制哪些客户端可以发布或者订阅哪些MQTT主题。\n1 2 3 4 5 6 7 8 9 10 11 12 13 CREATE TABLE `mqtt_acl` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `allow` int(1) DEFAULT \u0026#39;1\u0026#39; COMMENT \u0026#39;0: deny, 1: allow\u0026#39;, `ipaddr` varchar(60) DEFAULT NULL COMMENT \u0026#39;IpAddress\u0026#39;, `username` varchar(100) DEFAULT NULL COMMENT \u0026#39;Username\u0026#39;, `clientid` varchar(100) DEFAULT NULL COMMENT \u0026#39;ClientId\u0026#39;, `access` int(2) NOT NULL COMMENT \u0026#39;1: subscribe, 2: publish, 3: pubsub\u0026#39;, `topic` varchar(100) NOT NULL DEFAULT \u0026#39;\u0026#39; COMMENT \u0026#39;Topic Filter\u0026#39;, PRIMARY KEY (`id`), KEY `ipaddr` (`ipaddr`), KEY `username` (`username`), KEY `clientid` (`clientid`) ) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 客户端SDK安全 SDK引入了第三方库， 要走中台统一的三方库报备、审查，看看有没有漏洞或其他风险 。 集群部署 实际业务场景可能对高性能、高可用有着一定要求。这里以伪分布式集群为例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 version: \u0026#39;3.9\u0026#39; x-default-emqx: \u0026amp;default-emqx image: emqx/emqx:4.4.4 env_file: - conf.cluster.env healthcheck: test: [\u0026#34;CMD\u0026#34;, \u0026#34;/opt/emqx/bin/emqx_ctl\u0026#34;, \u0026#34;status\u0026#34;] interval: 5s timeout: 25s retries: 5 services: haproxy: container_name: haproxy image: haproxy:2.4 privileged: true depends_on: - emqx1 - emqx2 volumes: - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg - ./certs_ha/certs:/usr/local/etc/haproxy/certs ports: - \u0026#34;18083:18083\u0026#34; - \u0026#34;1883:1883\u0026#34; # - \u0026#34;8883:8883\u0026#34; - \u0026#34;8083:8083\u0026#34; # - \u0026#34;8084:8084\u0026#34; - \u0026#34;9090:9090\u0026#34; - \u0026#34;8081:8081\u0026#34; networks: - emqx_bridge working_dir: /usr/local/etc/haproxy command: - bash - -c - | set -x cat /usr/local/etc/haproxy/certs/cert.pem /usr/local/etc/haproxy/certs/key.pem \u0026gt; /tmp/emqx.pem haproxy -f /usr/local/etc/haproxy/haproxy.cfg emqx1: \u0026lt;\u0026lt;: *default-emqx container_name: node1.emqx.io environment: - \u0026#34;EMQX_HOST=node1.emqx.io\u0026#34; ports: - \u0026#34;18081:18083\u0026#34; - \u0026#34;8881:8083\u0026#34; - \u0026#34;1882:1883\u0026#34; - \u0026#34;18087:8081\u0026#34; networks: emqx_bridge: aliases: - node1.emqx.io volumes: - ./dockeremqx/emqx.conf:/opt/emqx/etc/emqx.conf - ./dockeremqx/acl.conf:/opt/emqx/etc/acl.conf - ./dockeremqx/emqx_auth_mysql.conf:/opt/emqx/etc/plugins/emqx_auth_mysql.conf - ./dockeremqx/loaded_plugins:/opt/emqx/data/loaded_plugins - ./dockeremqx/emqx1_log/log:/opt/emqx/log emqx2: \u0026lt;\u0026lt;: *default-emqx container_name: node2.emqx.io environment: - \u0026#34;EMQX_HOST=node2.emqx.io\u0026#34; ports: - \u0026#34;18082:18083\u0026#34; - \u0026#34;8882:8083\u0026#34; - \u0026#34;1881:1883\u0026#34; - \u0026#34;18088:8081\u0026#34; networks: emqx_bridge: aliases: - node2.emqx.io volumes: - ./dockeremqx/emqx.conf:/opt/emqx/etc/emqx.conf - ./dockeremqx/acl.conf:/opt/emqx/etc/acl.conf - ./dockeremqx/emqx_auth_mysql.conf:/opt/emqx/etc/plugins/emqx_auth_mysql.conf - ./dockeremqx/loaded_plugins:/opt/emqx/data/loaded_plugins - ./dockeremqx/emqx2_log/log:/opt/emqx/log networks: emqx_bridge: driver: bridge name: emqx_bridge # ipam: # driver: default # config: # - subnet: 172.100.239.0/24 # gateway: 172.100.239.1 协议接入 应用层协议包括mqtt、websocket、http。负载均衡器方面的配置非常关键，下面以haproxy为例(核心配置)：\n粘性会话是在haproxy中配置的。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 defaults log global mode http option httplog # Replace 1024000 with deployment connections maxconn 50000 timeout connect 30000 timeout client 600s timeout server 600s timeout tunnel 1h timeout client-fin 30s timeout http-keep-alive 5s timeout http-request 5s frontend emqx_tcp mode tcp option tcplog bind *:1883 # Reject connections that have an invalid MQTT packet # tcp-request content reject unless { req.payload(0,0), mqtt_is_valid } default_backend emqx_tcp_back frontend emqx_ws mode tcp option httplog bind *:8083 acl host_ws hdr_beg(Host) -i ws. acl hdr_connection_upgrade hdr(Connection) -i upgrade acl hdr_upgrade_websocket hdr(Upgrade) -i websocket use_backend emqx_ws_back if hdr_connection_upgrade hdr_upgrade_websocket default_backend emqx_ws_back backend emqx_tcp_back mode tcp stick on req.payload(0,0),mqtt_field_value(connect,client_identifier) server emqx-1 node1.emqx.io:1883 check-send-proxy send-proxy-v2 server emqx-2 node2.emqx.io:1883 check-send-proxy send-proxy-v2 backend emqx_ws_back mode http balance roundrobin acl hdr_connection_upgrade hdr(Connection) -i upgrade acl hdr_upgrade_websocket hdr(Upgrade) -i websocket acl hdr_websocket_key hdr_cnt(Sec-WebSocket-Key) eq 1 acl hdr_websocket_version hdr_cnt(Sec-WebSocket-Version) eq 1 server emqx-1 node1.emqx.io:8083 server emqx-2 node2.emqx.io:8083 测试 功能测试 目标：连接、发布、订阅等功能符合预期。\nEMQX是否正在运行的判断方法：正常进入管理后台界面、正常监听某些指定端口。\n运行指定语言的客户端SDK来进行关键功能测试，比如golang版本的SDK paho.golang ，JS版本的SDK mqtt-client-WebSocket 。当然也可以通过官方推荐的可视化工具来测试。 测试方法 测试点 期望结果 具体说明 客户端断线重连 emqx重启后，客户端自动重连 取决于客户端SDK是否实现了心跳重连 消息下发成功率 正常情况下，QoS 1报文不会丢失消息 Broker提供3种QoS，通常选择QoS 1报文(至少送达一次)来兼顾吞吐量和发布质量。 消息状态码 每次操作都能拿到实时且正确的状态码 状态码是MQTT 5.0新特性，客户端SDK需要支持5.0协议 性能测试 目标：确认是否与官方宣称的性能接近(机器硬件条件相同情况下)，提前暴露可能存在的BUG 测试方法 一般官方都会提供配套的压测工具脚本，比如emqtt-bench开源项目，将其运行在云主机，压测效果最好，减少网络传输时延。 1 ./emqtt_bench sub -t bench -h ${ip} -p 1883 -c 1000 -i 10 -q 1 -u ${username}-P ${password} 压测注意事项 压测客户端被限制：ulimit命令修改进程最大连接数限制，否则会压测不准，最大并发连接数卡在1007上不去。\n发布端发送消息速率过快： max_mqueue_len参数默认为1000，队列满会消息发送失败 负载均衡器maxconn设置过小：haproxy的maxconn默认值是1000，需要调大为50000\n总结 搭建开源服务器，需要实现协议接入、集群部署、接入安全等核心功能来满足业务需求，最终目的是为业务带来一定的价值。\n","date":"2022-10-30T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/10/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%BC%80%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"如何快速部署开源服务器"},{"content":" 从在浏览器中输入网址，到屏幕上显示出网页的内容，在这个只有几秒钟的过程中，很多硬件和软件都在各自的岗位上相互配合完成了一系列的工作。\n浏览器生成消息 用电信号传输TCP/IP 从网络到网络设备 通过接入网进入互联网内部 请求到达web服务器，响应返回浏览器","date":"2022-10-09T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img0.png","permalink":"https://soli.seekincs.com/2022/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/","title":"【读书笔记】网络是怎样连接的"},{"content":"Spark概述 一个高效通用的内存型分布式计算框架。\nSpark特点：\n速度快 易用使用 通用性 运行模式多样 Spark作业基本运行原理 运行流程 ","date":"2022-06-18T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img7.png","permalink":"https://soli.seekincs.com/2022/06/spark%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/","title":"spark原理浅析"}]