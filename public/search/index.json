[{"content":"MQTT协议 使用wireshark工具捕获mqtt协议包，主要包括3.0和5.0版本。\n部署EMQX EMQX 是一款大规模可弹性伸缩的云原生分布式物联网 MQTT 消息服务器😂。\n单机版 集群版 伪分布式集群 分布式集群 安全","date":"2022-11-13T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/mqtt-broker-in-action-cockymang/","title":"MQTT Broker in Action cockymang"},{"content":"MQTT协议 使用wireshark工具捕获mqtt协议包，主要包括3.0和5.0版本。\n部署EMQX EMQX 是一款大规模可弹性伸缩的云原生分布式物联网 MQTT 消息服务器😂。\n单机版 集群版 伪分布式集群 分布式集群 安全","date":"2022-11-13T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/11/mqtt-broker-in-action-cockymang/","title":"MQTT Broker in Action cockymang"},{"content":"\n背景 当需要提供一种新能力，考虑到成本问题，我们往往不会从0到1开发一个服务器，而是先在开源产品中选型对比，看是否已有能满足自身需求的开源产品(不重复造轮子的原则)。因为对开源服务器的不熟悉，部署过程中会踩这样那样的坑，效率比较低，如何快速部署并应用于实际业务场景呢？\n随便提一下，私有化部署的原因主要是考虑到数据安全，安全无小事，安全大于一切 准备工作 云主机(内部安装了docker、docker-compose、防火墙开放指定端口) 个人电脑(内部安装了docker-desktop、xshell、vscode、golang) 仔细看官方文档以及官方开源社区 注意：emqx是4.4.4版本\n部署 预期效果 (配置文件、日志)文件/目录挂载到本地磁盘\n监控、告警、可视化等功能\n协议接入、集群部署、接入安全 具体流程 个人电脑 -\u0026gt; 云主机\n单机版 -\u0026gt; 集群版(负载均衡) 启动 仔细检查docker-compose-emqx-cluster.yaml 配置文件，否则会启动失败\n启动命令： docker-compose -f docker-compose-emqx-cluster.yaml up \u0026amp; 退出命令： docker-compose -f docker-compose-emqx-cluster.yaml down 接入安全 服务端访问控制 在loaded_plugins配置文件中启用emqx_auth_mysql插件。 1 2 3 4 5 6 7 8 9 {emqx_management,true}. {emqx_dashboard,true}. {emqx_modules,false}. {emqx_recon,true}. {emqx_retainer,true}. {emqx_telemetry,true}. {emqx_rule_engine,true}. {emqx_bridge_mqtt,false}. {emqx_auth_mysql,true}. emqx默认是不设置权限，需要修改acl.conf启用鉴权。 1 2 3 {allow, {user, \u0026#34;dashboard\u0026#34;}, subscribe, [\u0026#34;$SYS/#\u0026#34;]}. {allow, {ipaddr, \u0026#34;127.0.0.1\u0026#34;}, pubsub, [\u0026#34;$SYS/#\u0026#34;, \u0026#34;#\u0026#34;]}. {deny, all, subscribe, [\u0026#34;$SYS/#\u0026#34;, {eq, \u0026#34;#\u0026#34;}]}. 修改emqx_auth_mysql.conf配置文件：修改数据库实例，创建认证表和授权表。\n用户名/密码认证防止非法客户端连接。 1 2 3 4 5 6 7 8 9 10 CREATE TABLE `mqtt_user` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(100) DEFAULT NULL, `password` varchar(100) DEFAULT NULL, `salt` varchar(35) DEFAULT NULL, `is_superuser` tinyint(1) DEFAULT \u0026#39;0\u0026#39;, `created` datetime DEFAULT NULL, PRIMARY KEY (`id`), UNIQUE KEY `mqtt_username` (`username`) ) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8mb4 对 MQTT 客户端的发布和订阅操作进行权限控制。控制哪些客户端可以发布或者订阅哪些MQTT主题。\n1 2 3 4 5 6 7 8 9 10 11 12 13 CREATE TABLE `mqtt_acl` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `allow` int(1) DEFAULT \u0026#39;1\u0026#39; COMMENT \u0026#39;0: deny, 1: allow\u0026#39;, `ipaddr` varchar(60) DEFAULT NULL COMMENT \u0026#39;IpAddress\u0026#39;, `username` varchar(100) DEFAULT NULL COMMENT \u0026#39;Username\u0026#39;, `clientid` varchar(100) DEFAULT NULL COMMENT \u0026#39;ClientId\u0026#39;, `access` int(2) NOT NULL COMMENT \u0026#39;1: subscribe, 2: publish, 3: pubsub\u0026#39;, `topic` varchar(100) NOT NULL DEFAULT \u0026#39;\u0026#39; COMMENT \u0026#39;Topic Filter\u0026#39;, PRIMARY KEY (`id`), KEY `ipaddr` (`ipaddr`), KEY `username` (`username`), KEY `clientid` (`clientid`) ) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8mb4 客户端SDK安全 SDK引入了第三方库， 要走中台统一的三方库报备、审查，看看有没有漏洞或其他风险 。 集群部署 实际业务场景可能对高性能、高可用有着一定要求。这里以伪分布式集群为例：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 version: \u0026#39;3.9\u0026#39; x-default-emqx: \u0026amp;default-emqx image: emqx/emqx:4.4.4 env_file: - conf.cluster.env healthcheck: test: [\u0026#34;CMD\u0026#34;, \u0026#34;/opt/emqx/bin/emqx_ctl\u0026#34;, \u0026#34;status\u0026#34;] interval: 5s timeout: 25s retries: 5 services: haproxy: container_name: haproxy image: haproxy:2.4 privileged: true depends_on: - emqx1 - emqx2 volumes: - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg - ./certs_ha/certs:/usr/local/etc/haproxy/certs ports: - \u0026#34;18083:18083\u0026#34; - \u0026#34;1883:1883\u0026#34; # - \u0026#34;8883:8883\u0026#34; - \u0026#34;8083:8083\u0026#34; # - \u0026#34;8084:8084\u0026#34; - \u0026#34;9090:9090\u0026#34; - \u0026#34;8081:8081\u0026#34; networks: - emqx_bridge working_dir: /usr/local/etc/haproxy command: - bash - -c - | set -x cat /usr/local/etc/haproxy/certs/cert.pem /usr/local/etc/haproxy/certs/key.pem \u0026gt; /tmp/emqx.pem haproxy -f /usr/local/etc/haproxy/haproxy.cfg emqx1: \u0026lt;\u0026lt;: *default-emqx container_name: node1.emqx.io environment: - \u0026#34;EMQX_HOST=node1.emqx.io\u0026#34; ports: - \u0026#34;18081:18083\u0026#34; - \u0026#34;8881:8083\u0026#34; - \u0026#34;1882:1883\u0026#34; - \u0026#34;18087:8081\u0026#34; networks: emqx_bridge: aliases: - node1.emqx.io volumes: - ./dockeremqx/emqx.conf:/opt/emqx/etc/emqx.conf - ./dockeremqx/acl.conf:/opt/emqx/etc/acl.conf - ./dockeremqx/emqx_auth_mysql.conf:/opt/emqx/etc/plugins/emqx_auth_mysql.conf - ./dockeremqx/loaded_plugins:/opt/emqx/data/loaded_plugins - ./dockeremqx/emqx1_log/log:/opt/emqx/log emqx2: \u0026lt;\u0026lt;: *default-emqx container_name: node2.emqx.io environment: - \u0026#34;EMQX_HOST=node2.emqx.io\u0026#34; ports: - \u0026#34;18082:18083\u0026#34; - \u0026#34;8882:8083\u0026#34; - \u0026#34;1881:1883\u0026#34; - \u0026#34;18088:8081\u0026#34; networks: emqx_bridge: aliases: - node2.emqx.io volumes: - ./dockeremqx/emqx.conf:/opt/emqx/etc/emqx.conf - ./dockeremqx/acl.conf:/opt/emqx/etc/acl.conf - ./dockeremqx/emqx_auth_mysql.conf:/opt/emqx/etc/plugins/emqx_auth_mysql.conf - ./dockeremqx/loaded_plugins:/opt/emqx/data/loaded_plugins - ./dockeremqx/emqx2_log/log:/opt/emqx/log networks: emqx_bridge: driver: bridge name: emqx_bridge # ipam: # driver: default # config: # - subnet: 172.100.239.0/24 # gateway: 172.100.239.1 协议接入 应用层协议包括mqtt、websocket、http。负载均衡器方面的配置非常关键，下面以haproxy为例(核心配置)：\n粘性会话是在haproxy中配置的。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 defaults log global mode http option httplog # Replace 1024000 with deployment connections maxconn 50000 timeout connect 30000 timeout client 600s timeout server 600s timeout tunnel 1h timeout client-fin 30s timeout http-keep-alive 5s timeout http-request 5s frontend emqx_tcp mode tcp option tcplog bind *:1883 # Reject connections that have an invalid MQTT packet # tcp-request content reject unless { req.payload(0,0), mqtt_is_valid } default_backend emqx_tcp_back frontend emqx_ws mode tcp option httplog bind *:8083 acl host_ws hdr_beg(Host) -i ws. acl hdr_connection_upgrade hdr(Connection) -i upgrade acl hdr_upgrade_websocket hdr(Upgrade) -i websocket use_backend emqx_ws_back if hdr_connection_upgrade hdr_upgrade_websocket default_backend emqx_ws_back backend emqx_tcp_back mode tcp stick on req.payload(0,0),mqtt_field_value(connect,client_identifier) server emqx-1 node1.emqx.io:1883 check-send-proxy send-proxy-v2 server emqx-2 node2.emqx.io:1883 check-send-proxy send-proxy-v2 backend emqx_ws_back mode http balance roundrobin acl hdr_connection_upgrade hdr(Connection) -i upgrade acl hdr_upgrade_websocket hdr(Upgrade) -i websocket acl hdr_websocket_key hdr_cnt(Sec-WebSocket-Key) eq 1 acl hdr_websocket_version hdr_cnt(Sec-WebSocket-Version) eq 1 server emqx-1 node1.emqx.io:8083 server emqx-2 node2.emqx.io:8083 测试 功能测试 目标：连接、发布、订阅等功能符合预期。\nEMQX是否正在运行的判断方法：正常进入管理后台界面、正常监听某些指定端口。\n运行指定语言的客户端SDK来进行关键功能测试，比如golang版本的SDK paho.golang ，JS版本的SDK mqtt-client-WebSocket 。当然也可以通过官方推荐的可视化工具来测试。 测试方法 测试点 期望结果 具体说明 客户端断线重连 emqx重启后，客户端自动重连 取决于客户端SDK是否实现了心跳重连 消息下发成功率 正常情况下，QoS 1报文不会丢失消息 Broker提供3种QoS，通常选择QoS 1报文(至少送达一次)来兼顾吞吐量和发布质量。 消息状态码 每次操作都能拿到实时且正确的状态码 状态码是MQTT 5.0新特性，客户端SDK需要支持5.0协议 性能测试 目标：确认是否与官方宣称的性能接近(机器硬件条件相同情况下)，提前暴露可能存在的BUG 测试方法 一般官方都会提供配套的压测工具脚本，比如emqtt-bench开源项目，将其运行在云主机，压测效果最好，减少网络传输时延。 1 ./emqtt_bench sub -t bench -h ${ip} -p 1883 -c 1000 -i 10 -q 1 -u ${username}-P ${password} 压测注意事项 压测客户端被限制：ulimit命令修改进程最大连接数限制，否则会压测不准，最大并发连接数卡在1007上不去。\n发布端发送消息速率过快： max_mqueue_len参数默认为1000，队列满会消息发送失败 负载均衡器maxconn设置过小：haproxy的maxconn默认值是1000，需要调大为50000\n总结 搭建开源服务器，需要实现协议接入、集群部署、接入安全等核心功能来满足业务需求，最终目的是为业务带来一定的价值。\n","date":"2022-10-30T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/10/%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E5%BC%80%E6%BA%90%E6%9C%8D%E5%8A%A1%E5%99%A8/","title":"如何快速部署开源服务器"},{"content":" 从在浏览器中输入网址，到屏幕上显示出网页的内容，在这个只有几秒钟的过程中，很多硬件和软件都在各自的岗位上相互配合完成了一系列的工作。\n浏览器生成消息 用电信号传输TCP/IP 从网络到网络设备 通过接入网进入互联网内部 请求到达web服务器，响应返回浏览器","date":"2022-10-09T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img0.png","permalink":"https://soli.seekincs.com/2022/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E7%BD%91%E7%BB%9C%E6%98%AF%E6%80%8E%E6%A0%B7%E8%BF%9E%E6%8E%A5%E7%9A%84/","title":"【读书笔记】网络是怎样连接的"},{"content":"操作系统是什么？ 实际上，有一类软件负责让程序运行变得容易（甚至允许你同时运行多个程序），允许程序共享内存，让程序能够与设备交互，以及其他类似的有趣的工作。这些软件称为操作系统，因为它们负责确保系统既易于使用又正确高效地运行。\n关键问题：操作系统如何将资源虚拟化 为什么操作系统这样做？这不是主要问题，因为答案应该很明显：它让系统更易于使用。因此，我们关注如何虚拟化：操作系统通过哪些机制和策略来实现虚拟化？操作系统如何有效地实现虚拟化？需要哪些硬件支持？\n操作系统将物理资源（如处理器、内存或磁盘）转换为更通用、更强大且更易于使用的虚拟形式。因此，我们有时将操作系统称为虚拟机。 因为虚拟化让许多程序运行（从而共享CPU），让许多程序可以同时访问自己的指令和数据（从而共享内存），让许多程序访问设备（从而共享磁盘等），所以操作系统有时被称为资源管理器。每个CPU、内存和磁盘都是系统的资源，因此操作系统扮演的主要角色就是管理这些资源，以做到高效或公平。\n虚拟化CPU 在硬件的一些帮助下，操作系统负责提供这种假象，即系统拥有非常多的虚拟CPU的假象。将单个CPU（或其中一小部分）转换为看似无限数量的CPU，从而让许多程序看似同时运行，这就是所谓的虚拟化CPU。\n虚拟化内存 每个进程访问自己的私有虚拟地址空间（有时称为地址空间），操作系统以某种方式映射到机器的物理内存上。一个正在运行的程序中的内存引用不会影响其他进程（或操作系统本身）的地址空间。对于正在运行的程序，它完全拥有自己的物理内存。\n关键问题：如何构建正确的并发程序 如果同一个内存空间中有很多并发执行的线程，如何构建一个正确工作的程序？操作系统需要什么原语？硬件应该提供哪些机制？我们如何利用它们来解决并发问题？\n关键问题：如何持久地存储数据 文件系统是操作系统的一部分，负责管理持久的数据。持久性需要哪些技术才能正确地实现？需要哪些机制和策略才能高性能地实现？面对硬件和软件故障，可靠性如何实现？\n操作系统做了什么？ 它取得CPU、内存或磁盘等物理资源，并对它们进行虚拟化。它处理与并发有关的麻烦且棘手的问题。它持久地存储文件，从而使它们长期安全。\n操作系统的设计目标 一个最基本的目标，是建立一些抽象，让系统方便和易于使用。\n设计和实现操作系统的一个目标，是提供高性能。换言之，我们的目标是最小化操作系统的开销。\n另一个目标是在应用程序之间以及在OS和应用程序之间提供保护。\n根据系统的使用方式，操作系统将有不同的目标，因此可能至少以稍微不同的方式实现。\n","date":"2022-10-08T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/10/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AF%BC%E8%AE%BA/","title":"【读书笔记】操作系统导论"},{"content":"Golang概述 Channel GMP调度模型 Mutex WaitGroup ","date":"2022-06-18T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img8.png","permalink":"https://soli.seekincs.com/2022/06/todogolang%E7%9B%B8%E5%85%B32333/","title":"【TODO】golang相关2333"},{"content":"Kafka概述 体系架构、多副本机制、分区机制。\nKafka的生产者(客户端) Kafka的消费者(客户端) Kafka的服务端 Kafka的协调者 Kafka的存储层 Kafka日志结构 Kafka常见问题讨论 Kafka是如何保障数据不丢失的？ 如何解决Kafka数据丢失问题？ Kafka可以保障永久不丢失数据吗？ 如何保障Kafka中的消息是有序的？ 如何确定Kafka主题的分区数量？ 如何调整生产环境中Kafka主题的分区数量？ 如何重平衡Kafka集群？ 如何查看消费者组是否存在滞后消费？ PageCache 缓存最近被访问的数据 预读功能 消息顺序性问题 分区有序而不是主题有序。分区有序是通过offset实现的。\n分区机制 一个主题不可能只对应一个文件(单机I/O会成为性能瓶颈) 一个主题包含多个分区，每个分区是一个可追加的日志文件。不同分区在不同broker上。\n消息中间件选型 功能维度(延时队列) 性能维度() 可靠性和可用性 运维管理 社区力度和生态发展 ","date":"2022-06-18T00:00:00Z","image":"https://soli.seekincs.com/2022/06/kafka%E7%AE%80%E4%BB%8B/img_hu7f23b3a64bd1dfa706352f2ec1f13407_619022_120x120_fill_box_smart1_3.png","permalink":"https://soli.seekincs.com/2022/06/kafka%E7%AE%80%E4%BB%8B/","title":"kafka简介"},{"content":"字段类型与查询类型不一致导致不走索引 third_id字段类型是varchar，参数传的却是数字，这种情况下不会走索引，导致慢查\nSQL示例 1 SELECT * FROM `meta` WHERE `audit_pass`=1 and `state`=1 and third_id in(1,2,3) ","date":"2022-06-18T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img1.png","permalink":"https://soli.seekincs.com/2022/06/mysql%E6%85%A2%E6%9F%A5%E8%AF%A2/","title":"mysql慢查询"},{"content":"Spark概述 一个高效通用的内存型分布式计算框架。\nSpark特点：\n速度快 易用使用 通用性 运行模式多样 Spark作业基本运行原理 运行流程 ","date":"2022-06-18T00:00:00Z","image":"https://someblogs.oss-cn-shenzhen.aliyuncs.com/thumb/img7.png","permalink":"https://soli.seekincs.com/2022/06/spark%E5%8E%9F%E7%90%86%E6%B5%85%E6%9E%90/","title":"spark原理浅析"}]